target C {
  scheduler: {
    type: STATIC,
    static-scheduler: MOCASIN,
  },
  workers: 2,
  timeout: 100 msec,
}

preamble {=
#define EXPECTED 110
=}

reactor Source {
  output out: int
  timer t(1 nsec, 10 msec)
  state s: int = 0

  @wcet("1 ms, 500 us")
  reaction(startup) {= lf_print("Starting Source"); =}

  @wcet("3 ms, 500 us")
  reaction(t) -> out {=
    lf_set(out, self->s++);
    lf_print("Inside source reaction_0");
  =}
}

reactor Sink {
  input in: int
  input in2: int
  timer t(1 nsec, 5 msec)
  state sum: int = 0

  @wcet("1 ms, 500 us")
  reaction(startup) {= lf_print("Starting Sink"); =}

  @wcet("1 ms, 500 us")
  reaction(t) {=
    self->sum++;
    lf_print("Sum: %d", self->sum);
  =}

  @wcet("1 ms, 500 us")
  reaction(in) {=
    self->sum += in->value;
    lf_print("Sum: %d", self->sum);
  =}

  @wcet("1 ms, 500 us")
  reaction(in2) {=
    self->sum += in2->value;
    lf_print("Sum: %d", self->sum);
  =}

  reaction(shutdown) {=
    if (self->sum != EXPECTED) {
      fprintf(stderr, "FAILURE: Expected %d\n", EXPECTED);
      exit(1);
    }
  =}
}

main reactor {
  source = new Source()
  source2 = new Source()
  sink = new Sink()
  source.out -> sink.in
  source2.out -> sink.in2
}
